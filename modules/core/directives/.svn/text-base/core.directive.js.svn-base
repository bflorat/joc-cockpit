/**
 * Created by sourabhagrawal on 6/6/15.
 */


'use strict';
var app = angular.module('com.module.core');

   app.directive('ngSpinnerBar', ["$rootScope", function($rootScope) {
       return {
           link: function (scope, element, attrs) {
               // by defult hide the spinner bar
               element.addClass('hide'); // hide spinner bar by default

               // display the spinner bar whenever the route changes(the content part started loading)
               $rootScope.$on('$stateChangeStart', function () {
                   element.removeClass('hide'); // show spinner bar
               });

               // hide the spinner bar on rounte change success(after the content loaded)
               $rootScope.$on('$stateChangeSuccess', function () {
                   element.addClass('hide'); // hide spinner bar
                   $('body').removeClass('page-on-load'); // remove page loading indicator
                   Layout.setSidebarMenuActiveLink('match'); // activate selected link in the sidebar menu

                   // auto scorll to page top
                   setTimeout(function () {
                       Theme.scrollTop(); // scroll to the top on content load
                   }, 1000);
               });

               // handle errors
               $rootScope.$on('$stateNotFound', function () {
                   element.addClass('hide'); // hide spinner bar
               });

               // handle errors
               $rootScope.$on('$stateChangeError', function () {
                   element.addClass('hide'); // hide spinner bar
               });
           }
       };
   }]);

  // Handle global LINK click
  app.directive('a', function() {
      return {
          restrict: 'E',
          link: function (scope, elem, attrs) {
              if (attrs.ngClick || attrs.href === '' || attrs.href === '#') {
                  elem.on('click', function (e) {
                      e.preventDefault(); // prevent link click for above criteria
                  });
              }
          }
      };
  });

  // Handle Dropdown Hover Plugin Integration
  app.directive('dropdownMenuHover', function () {
      return {
          link: function (scope, elem) {
              elem.dropdownHover();
          }
      };
  });

  //Handle checkbox
  app.directive("checkbox", function() {
      return {
          scope: {},
          require: "ngModel",
          restrict: "E",
          replace: "true",
          template: "<button type=\"button\" ng-style=\"stylebtn\" class=\"btn btn-default\" ng-class=\"{'btn-xs': size==='default'}\">" +
          "<span ng-style=\"styleicon\" class=\"glyphicon\" ng-class=\"{'glyphicon-ok': checked===true}\"></span>" +
          "</button>",
          link: function (scope, elem, attrs, modelCtrl) {
              scope.size = "default";
              // Default Button Styling
              scope.stylebtn = {"padding-top": "2px", "padding-bottom": "2px", "height": "17px"};
              // Default Checkmark Styling
              scope.styleicon = {"width": "5px", "left": "-4px", "top": "-4px"};
              // If size is undefined, Checkbox has normal size (Bootstrap 'xs')

              var trueValue = true;
              var falseValue = false;

              // If defined set true value
              if (attrs.ngTrueValue !== undefined) {
                  trueValue = attrs.ngTrueValue;
              }
              // If defined set false value
              if (attrs.ngFalseValue !== undefined) {
                  falseValue = attrs.ngFalseValue;
              }

              // Check if name attribute is set and if so add it to the DOM element
              if (scope.name !== undefined) {
                  elem.name = scope.name;
              }

              // Update element when model changes
              scope.$watch(function () {
                  if (modelCtrl.$modelValue === trueValue || modelCtrl.$modelValue === true) {
                      modelCtrl.$setViewValue(trueValue);
                  } else {
                      modelCtrl.$setViewValue(falseValue);
                  }
                  return modelCtrl.$modelValue;
              }, function (newVal, oldVal) {
                  scope.checked = modelCtrl.$modelValue === trueValue;
              }, true);

              // On click swap value and trigger onChange function
              elem.bind("click", function () {

                  scope.$apply(function () {
                      if (modelCtrl.$modelValue === falseValue) {
                          modelCtrl.$setViewValue(trueValue);
                      } else {
                          modelCtrl.$setViewValue(falseValue);
                      }
                  });
              });
          }
      };
  });

   app.directive('onFinishRender', ["$timeout", function ($timeout) {
       return {
           restrict: 'A',
           link: function (scope, element, attr) {
               if (scope.$last === true) {
                   $timeout(function () {
                       scope.$emit('ngRepeatFinished');
                   });
               }
           }
       }
   }]);


    // Angular File Upload file preview
   app.directive('ngThumb', ["$window", function($window) {
       var helper = {
           support: !!($window.FileReader && $window.CanvasRenderingContext2D),
           isFile: function (item) {
               return angular.isObject(item) && item instanceof $window.File;
           },
           isImage: function (file) {
               var type = '|' + file.type.slice(file.type.lastIndexOf('/') + 1) + '|';
               return '|jpg|png|jpeg|bmp|gif|tif|tiff|svg'.indexOf(type) !== -1;
           }
       };

       return {
           restrict: 'A',
           template: '<canvas/>',
           link: function (scope, element, attributes) {
               if (!helper.support) return;

               var params = scope.$eval(attributes.ngThumb);

               if (!helper.isFile(params.file)) return;
               if (!helper.isImage(params.file)) return;

               var canvas = element.find('canvas');
               var reader = new FileReader();

               reader.onload = onLoadFile;
               reader.readAsDataURL(params.file);

               function onLoadFile(event) {
                   var img = new Image();
                   img.onload = onLoadImage;
                   img.src = event.target.result;
               }

               function onLoadImage() {
                   var width = params.width || this.width / this.height * params.height;
                   var height = params.height || this.height / this.width * params.width;
                   canvas.attr({width: width, height: height});
                   canvas[0].getContext('2d').drawImage(this, 0, 0, width, height);
               }
           }
       };
   }]);