/**
 * Created by sourabhagrawal on 25/04/16.
 */

(function () {
    'use strict';

    angular.module('com.module.user')
        .controller('LoginCtrl', LoginCtrl)
        .controller('RegisterCtrl', RegisterCtrl)
        .controller('ProfileCtrl', ProfileCtrl)
        .controller('ChangePasswordCtrl', ChangePasswordCtrl)
        .controller('ResetCtrl', ResetCtrl);


    LoginCtrl.$inject = ['$scope', 'Auth', '$location', '$rootScope', 'UserService'];
    function LoginCtrl($scope, Auth, $location, $rootScope, UserService) {
        var vm = $scope;
        vm.user = {};
        vm.rememberMe = false;

        vm.login = function () {
            if (vm.user.username && vm.user.password) {

                $('#loginBtn').text("Processing...");
                vm.isProcessing = true;
                Auth.currentUserData = null;
                UserService.authenticate(vm.user.username, vm.user.password)
                .then(function (response) {
                    if (response.data) {
                        Auth.setUser(response.data);
                        Auth.rememberMe = vm.rememberMe;
                    }
                    Auth.save();
                    console.log(response);
                    $location.path('/');
                    $('#loginBtn').text('Sign In');
                    vm.isProcessing = false;
                    vm.user = {};
                    $rootScope.$broadcast('reload');

                }, function (err) {
                    vm.loginError = 'Username or password is wrong';
                    Auth.currentUserData = null;
                    Auth.save();
                    $('#loginBtn').text("Sign In");
                    vm.isProcessing = false;
                });
            }
        };

    }

    RegisterCtrl.$inject = ['$scope', '$http', 'CoreService'];
    function RegisterCtrl($scope, $http, CoreService) {

        var vm = $scope;

        vm.user = {};

        vm.registerError = '';


        vm.register = function () {
                vm.isProcessing = true;
                $('#signup').text('Processing...');
                $http.post('api/users', {
                    name: vm.user.name,
                    email: vm.user.email,
                    password: vm.user.password,
                    username: vm.user.email
                }).then(function (res) {
                    vm.user = {};
                    vm.registerError ="";
                    vm.signupForm.$setPristine();
                    vm.isSubmit = true;
                    vm.userId = res.data.data;
                    vm.isProcessing = false;
                     $('#signup').text('Sign up');
                                        CoreService.alertSuccess('Registration Successfully ',
                        'Please check your email and click on the verification link before logging in!');
                }, function (err) {
                    if (err.status === 422) {
                    vm.registerError = 'Email ID is already exist'
                } else {
                        vm.registerError = 'Registration failed';
                    }

                    $('#signup').text('Sign up');
                    vm.isProcessing = false;

                });
        };


        vm.registerOrganization = function () {

                vm.isProcessing = true;
                $('#create').text('Processing...');
                $http.post('api/Organizations/addMember ', {
                    ownerId: vm.userId,
                    orgId: vm.user.organizationId
                }).then(function () {
                    vm.user = {};

                       CoreService.alertSuccess(gettextCatalog.getString('Waiting for Organization Approval'));
                    vm.isProcessing = false;
                    $('#create').text('Create');

                }, function (err) {
                    vm.registerError = err.message;
                    $('#create').text('Create');
                    vm.isProcessing = false;

                });

        }

    }

    ProfileCtrl.$inject = ['$scope', '$rootScope', '$http', 'CoreService', 'Auth', 'FileUploader'];

    function ProfileCtrl($scope, $rootScope, $http, CoreService, Auth, FileUploader) {
        var vm = $scope;

        vm.userInfo = JSON.parse(Auth.currentUserData);

        if (vm.userInfo.photoLink) {
            vm.userInfo.photoLink = 'api/containers/files/download/' + encodeURIComponent(vm.userInfo.photoLink)
        } else {
            vm.userInfo.photoLink = 'api/containers/files/download/thumb.jpg'
        }

        vm.refreshAddresses = function (address) {
            var params = {address: address, sensor: false};
            return $http.get(
                'http://maps.googleapis.com/maps/api/geocode/json',
                {params: params}
            ).then(function (response) {

                    vm.addresses = response.data.results;
                });
        };

        var uploader = vm.uploader = new FileUploader({

            url: 'api/containers/files/upload',
            formData: [
                {
                    key: 'value'
                }]
        });

        // CALLBACKS
        uploader.onAfterAddingFile = function (item) {
            if (item.file.size > 1024 * 1024 * 5) {
                CoreService.alertWarning('File size is exceed!', 'Please upload profile image less than 1 MB');
                item.remove();
            }
            var ext = item.file.name.slice(item.file.name.lastIndexOf('.') + 1);
            if (ext.toLocaleLowerCase() === 'jpg' || ext.toLocaleLowerCase() === 'png' ||
                ext.toLocaleLowerCase() === 'jpeg') {
                item.file.name = new Date().getTime() + '_profile_image' + '.' + ext;
                vm.loading = true;
                item.upload();

            } else {
                CoreService.alertWarning('File extension .' + ext + ' is allowed!', 'Please upload profile image with following extensions jpg/jpeg/png');
                item.remove();
            }
        };

        uploader.onErrorItem = function (fileItem, response, status, headers) {
            CoreService.alertError('Error in profile image uploading', 'We received a ' + status + ' error from the API!');
            vm.loading = false;
        };

        uploader.onCompleteItem = function (fileItem, response, status, headers) {
            if (status == 200) {
                vm.userInfo.photoLink = fileItem.file.name;
                vm.saveImage();

            }
            vm.loading = false;
        };

        /**
         * The function to update user detail
         * @returns {*}
         */
        vm.saveImage = function () {

            $http.put('api/users/' + vm.userInfo.id, vm.userInfo).success(function (res) {
                Auth.currentUserData = JSON.stringify(res);
                Auth.save();

                $rootScope.$broadcast('reload', $rootScope.reload);
                CoreService.alertSuccess('Profile Image Successfully Updated!');
            }).error(function (err) {
                CoreService.alertError('Oops',
                    'Error ' + err.message);
            });
        };

        /**
         * The function to update user detail
         * @returns {*}
         */
        vm.saveUser = function () {
            $http.put('api/users/' + vm.userInfo.id, vm.userInfo).success(function (res) {

                Auth.currentUserData = JSON.stringify(res);
                Auth.save();
                $rootScope.$broadcast('reload', false);
                CoreService.alertSuccess('Profile Successfully Updated!');
            }).error(function (err) {
                CoreService.alertError('Oops',
                    'Error ' + err.message);
            });
        };
    }


    ChangePasswordCtrl.$inject = ['$scope', '$http', 'Auth', 'CoreService'];

    function ChangePasswordCtrl($scope, $http, Auth, CoreService) {
        var vm = $scope;
        vm.userInfo = JSON.parse(Auth.currentUserData);
        vm.user = {};


        vm.save = function () {
            vm.err = '';
            $('#changePwdBtn').text("Processing...");
            vm.isProcessing = true;

            vm.userInfo.password = vm.user.newPassword;
            var url = 'api/users/login?include=user';

            $http.post(url, {
                email: vm.userInfo.email,
                password: vm.user.oldPassword
            }).success(function (response) {
                $http.put('api/users/' + vm.userInfo.id, vm.userInfo).success(function (res) {
                    CoreService.alertSuccess('Your password has been changed!');
                    $('#changePwdBtn').text("UPDATE");
                    vm.isProcessing = false;
                    vm.user = {};
                    vm.form.$setPristine();

                }).error(function (err) {
                    CoreService.alertError('Internal error!', 'Failed to change your password');

                    $('#changePwdBtn').text("UPDATE");
                    vm.isProcessing = false;
                });
            }).error(function (err) {
                vm.err = 'Enter correct password';
                $('#changePwdBtn').text("Update");
                vm.isProcessing = false;

                vm.form.$setPristine();
            })
        }

        vm.clear = function () {
            vm.err = '';
        }

    }

    ResetCtrl.$inject = ['$scope', '$http', 'CoreService', '$location','$uibModalInstance'];
    function ResetCtrl($scope, $http, CoreService, $location, $uibModalInstance) {
        var vm = $scope;

         vm.cancel = function () {
                $uibModalInstance.close();
                vm.login();
            };
        vm.email = '';
        vm.resetError = '';

        /**
         * The function to reset user password
         */
        vm.reset = function () {
            $http.post('api/users/reset', {email: vm.email}).success(function () {
                vm.email = '';
                CoreService.alertSuccess('A password change link is being sent to your registered email address !');
                $location.path('/access/signin');
            }).error(function (err) {
                vm.resetError = err.message;

            });
        };
    }

})();